/* A recursive-descent parser generated by peg 0.1.2 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 59

#include <stdlib.h>
#include "tr.h"
#include "internal.h"

/*#define YY_DEBUG 1*/

#define YYSTYPE   OBJ
#define YYMALLOC  TR_MALLOC
#define YYREALLOC TR_REALLOC
#define yyvm      compiler->vm

static char *charbuf;
static char *sbuf;
static size_t nbuf;
static TrCompiler *compiler;

#define YY_INPUT(buf, result, max_size) { \
  int yyc; \
  if (charbuf && *charbuf != '\0') \
    yyc= *charbuf++; \
  else \
    yyc= EOF; \
  result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1); \
}

/* TODO grow buffer */
#define STRING_MAX   4096
#define STRING_START sbuf = TR_ALLOC_N(char, STRING_MAX); nbuf = 0
#define STRING_PUSH(P,L) \
  assert(nbuf + (L) < 4096); \
  TR_MEMCPY_N(sbuf + nbuf, (P), char, (L)); \
  nbuf += (L)


#ifndef YY_VARIABLE
#define YY_VARIABLE(T)	static T
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yybegin= yypos, 1)
#endif
#ifndef YY_END
#define YY_END		( yyend= yypos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#ifndef YYMALLOC
#define YYMALLOC malloc
#endif
#ifndef YYREALLOC
#define YYREALLOC realloc
#endif

#ifndef YY_PART

typedef void (*yyaction)(char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

YY_VARIABLE(char *   ) yybuf= 0;
YY_VARIABLE(int	     ) yybuflen= 0;
YY_VARIABLE(int	     ) yypos= 0;
YY_VARIABLE(int	     ) yylimit= 0;
YY_VARIABLE(char *   ) yytext= 0;
YY_VARIABLE(int	     ) yytextlen= 0;
YY_VARIABLE(int	     ) yybegin= 0;
YY_VARIABLE(int	     ) yyend= 0;
YY_VARIABLE(int	     ) yytextmax= 0;
YY_VARIABLE(yythunk *) yythunks= 0;
YY_VARIABLE(int	     ) yythunkslen= 0;
YY_VARIABLE(int      ) yythunkpos= 0;
YY_VARIABLE(YYSTYPE  ) yy;
YY_VARIABLE(YYSTYPE *) yyval= 0;
YY_VARIABLE(YYSTYPE *) yyvals= 0;
YY_VARIABLE(int      ) yyvalslen= 0;

YY_LOCAL(int) yyrefill(void)
{
  int yyn;
  while (yybuflen - yypos < 512)
    {
      yybuflen *= 2;
      yybuf= (char *)YYREALLOC(yybuf, yybuflen);
    }
  YY_INPUT((yybuf + yypos), yyn, (yybuflen - yypos));
  if (!yyn) return 0;
  yylimit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(void)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  ++yypos;
  return 1;
}

YY_LOCAL(int) yymatchChar(int c)
{
  if (yypos >= yylimit && !yyrefill()) return 0;
  if (yybuf[yypos] == c)
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchChar(%c) @ %s\n", c, yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(%c) @ %s\n", c, yybuf+yypos));
  return 0;
}

YY_LOCAL(int) yymatchString(char *s)
{
  int yysav= yypos;
  while (*s)
    {
      if (yypos >= yylimit && !yyrefill()) return 0;
      if (yybuf[yypos] != *s)
        {
          yypos= yysav;
          return 0;
        }
      ++s;
      ++yypos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(unsigned char *bits)
{
  int c;
  if (yypos >= yylimit && !yyrefill()) return 0;
  c= yybuf[yypos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yypos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yybuf+yypos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yybuf+yypos));
  return 0;
}

YY_LOCAL(void) yyDo(yyaction action, int begin, int end)
{
  while (yythunkpos >= yythunkslen)
    {
      yythunkslen *= 2;
      yythunks= (yythunk *)YYREALLOC(yythunks, sizeof(yythunk) * yythunkslen);
    }
  yythunks[yythunkpos].begin=  begin;
  yythunks[yythunkpos].end=    end;
  yythunks[yythunkpos].action= action;
  ++yythunkpos;
}

YY_LOCAL(int) yyText(int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yytextlen < (yyleng - 1))
	{
	  yytextlen *= 2;
	  yytext= (char *)YYREALLOC(yytext, yytextlen);
	}
      memcpy(yytext, yybuf + begin, yyleng);
    }
  yytext[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(void)
{
  int pos;
  for (pos= 0;  pos < yythunkpos;  ++pos)
    {
      yythunk *thunk= &yythunks[pos];
      int yyleng= thunk->end ? yyText(thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yytext));
      thunk->action(yytext, yyleng);
    }
  yythunkpos= 0;
}

YY_LOCAL(void) yyCommit()
{
  if ((yylimit -= yypos))
    {
      memmove(yybuf, yybuf + yypos, yylimit);
    }
  yybegin -= yypos;
  yyend -= yypos;
  yypos= yythunkpos= 0;
}

YY_LOCAL(int) yyAccept(int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone();
      yyCommit();
    }
  return 1;
}

YY_LOCAL(void) yyPush(char *text, int count)	{ (void)text; yyval += count; }
YY_LOCAL(void) yyPop(char *text, int count)	{ (void)text; yyval -= count; }
YY_LOCAL(void) yySet(char *text, int count)	{ (void)text; yyval[count]= yy; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yythunkpos0)

YY_RULE(int) yy_ESC_CHAR(); /* 59 */
YY_RULE(int) yy_LOGICOP(); /* 58 */
YY_RULE(int) yy_UNOP(); /* 57 */
YY_RULE(int) yy_NAME(); /* 56 */
YY_RULE(int) yy_KEYWORD(); /* 55 */
YY_RULE(int) yy_HashItems(); /* 54 */
YY_RULE(int) yy_STRING2(); /* 53 */
YY_RULE(int) yy_STRING1(); /* 52 */
YY_RULE(int) yy_REGEXP(); /* 51 */
YY_RULE(int) yy_SYMBOL(); /* 50 */
YY_RULE(int) yy_NUMBER(); /* 49 */
YY_RULE(int) yy_AryItems(); /* 48 */
YY_RULE(int) yy_Param(); /* 47 */
YY_RULE(int) yy_METHOD(); /* 46 */
YY_RULE(int) yy_Method(); /* 45 */
YY_RULE(int) yy_Else(); /* 44 */
YY_RULE(int) yy_GLOBAL(); /* 43 */
YY_RULE(int) yy_CVAR(); /* 42 */
YY_RULE(int) yy_IVAR(); /* 41 */
YY_RULE(int) yy_CONST(); /* 40 */
YY_RULE(int) yy_Params(); /* 39 */
YY_RULE(int) yy_SPACE(); /* 38 */
YY_RULE(int) yy_BINOP(); /* 37 */
YY_RULE(int) yy_Args(); /* 36 */
YY_RULE(int) yy_Receiver(); /* 35 */
YY_RULE(int) yy_ASSIGN(); /* 34 */
YY_RULE(int) yy_ID(); /* 33 */
YY_RULE(int) yy_Block(); /* 32 */
YY_RULE(int) yy_Message(); /* 31 */
YY_RULE(int) yy_EOL(); /* 30 */
YY_RULE(int) yy_Value(); /* 29 */
YY_RULE(int) yy_Break(); /* 28 */
YY_RULE(int) yy_Return(); /* 27 */
YY_RULE(int) yy_Yield(); /* 26 */
YY_RULE(int) yy_Range(); /* 25 */
YY_RULE(int) yy_Call(); /* 24 */
YY_RULE(int) yy_SpecCall(); /* 23 */
YY_RULE(int) yy_BinOp(); /* 22 */
YY_RULE(int) yy_UnaryOp(); /* 21 */
YY_RULE(int) yy_AsgnCall(); /* 20 */
YY_RULE(int) yy_Assign(); /* 19 */
YY_RULE(int) yy_Expr(); /* 18 */
YY_RULE(int) yy_Module(); /* 17 */
YY_RULE(int) yy_Class(); /* 16 */
YY_RULE(int) yy_Def(); /* 15 */
YY_RULE(int) yy_Unless(); /* 14 */
YY_RULE(int) yy_If(); /* 13 */
YY_RULE(int) yy_For(); /* 12 */
YY_RULE(int) yy_Until(); /* 11 */
YY_RULE(int) yy_While(); /* 10 */
YY_RULE(int) yy_LogicOp(); /* 9 */
YY_RULE(int) yy_OptStmts(); /* 8 */
YY_RULE(int) yy_Comment(); /* 7 */
YY_RULE(int) yy_Stmt(); /* 6 */
YY_RULE(int) yy__(); /* 5 */
YY_RULE(int) yy_SEP(); /* 4 */
YY_RULE(int) yy_EOF(); /* 3 */
YY_RULE(int) yy_Stmts(); /* 2 */
YY_RULE(int) yy_Root(); /* 1 */

YY_ACTION(void) yy_1_EOL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_EOL\n"));
   compiler->line++ ;
}
YY_ACTION(void) yy_3_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_REGEXP\n"));
   yy = TrRegexp_new(yyvm, sbuf, 0) ;
}
YY_ACTION(void) yy_2_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_REGEXP\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_1_REGEXP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_REGEXP\n"));
   STRING_START ;
}
YY_ACTION(void) yy_3_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_STRING2\n"));
   yy = TrString_new2(yyvm, sbuf) ;
}
YY_ACTION(void) yy_2_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_STRING2\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_1_STRING2(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_STRING2\n"));
   STRING_START ;
}
YY_ACTION(void) yy_7_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_7_ESC_CHAR\n"));
   STRING_PUSH("\\", 1) ;
}
YY_ACTION(void) yy_6_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_6_ESC_CHAR\n"));
   STRING_PUSH("\"", 1) ;
}
YY_ACTION(void) yy_5_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_5_ESC_CHAR\n"));
   STRING_PUSH("\t", 1) ;
}
YY_ACTION(void) yy_4_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_4_ESC_CHAR\n"));
   STRING_PUSH("\r", 1) ;
}
YY_ACTION(void) yy_3_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_ESC_CHAR\n"));
   STRING_PUSH("\f", 1) ;
}
YY_ACTION(void) yy_2_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_ESC_CHAR\n"));
   STRING_PUSH("\b", 1) ;
}
YY_ACTION(void) yy_1_ESC_CHAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ESC_CHAR\n"));
   STRING_PUSH("\n", 1) ;
}
YY_ACTION(void) yy_4_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_4_STRING1\n"));
   yy = TrString_new2(yyvm, sbuf) ;
}
YY_ACTION(void) yy_3_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_STRING1\n"));
   STRING_PUSH(yytext, yyleng) ;
}
YY_ACTION(void) yy_2_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_STRING1\n"));
   STRING_PUSH("'", 1) ;
}
YY_ACTION(void) yy_1_STRING1(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_STRING1\n"));
   STRING_START ;
}
YY_ACTION(void) yy_1_SYMBOL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_SYMBOL\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_NUMBER(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_NUMBER\n"));
   yy = TR_INT2FIX(atoi(yytext)) ;
}
YY_ACTION(void) yy_1_GLOBAL(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_GLOBAL\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_CVAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_CVAR\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_IVAR(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_IVAR\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_ASSIGN(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ASSIGN\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_LOGICOP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_LOGICOP\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_UNOP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_UNOP\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_BINOP(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_BINOP\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_CONST(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_CONST\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_3_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_3_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_2_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_2_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_1_ID(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_ID\n"));
   yy = TrSymbol_new(yyvm, yytext) ;
}
YY_ACTION(void) yy_4_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_4_HashItems\n"));
   yy = head ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_3_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_3_HashItems\n"));
   PUSH_NODE(head, val) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_2_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_2_HashItems\n"));
   PUSH_NODE(head, key) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_1_HashItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define key yyval[-1]
#define val yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_1_HashItems\n"));
   head = NODES_N(2, head, val) ;
#undef key
#undef val
#undef head
}
YY_ACTION(void) yy_3_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_AryItems\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_AryItems\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_AryItems(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_AryItems\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_17_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_17_Value\n"));
   yy = NODE(HASH, items) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_16_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_16_Value\n"));
   yy = NODE(HASH, NODES_N(0)) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_15_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_15_Value\n"));
   yy = NODE(ARRAY, items) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_14_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_14_Value\n"));
   yy = NODE(ARRAY, NODES_N(0)) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_13_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_13_Value\n"));
   yy = NODE(GETGLOBAL, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_12_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_12_Value\n"));
   yy = NODE(GETCVAR, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_11_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_11_Value\n"));
   yy = NODE(GETIVAR, name) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_10_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_10_Value\n"));
   yy = NODE(SELF, 0) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_9_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_9_Value\n"));
   yy = NODE(BOOL, TR_FALSE) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_8_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_8_Value\n"));
   yy = NODE(BOOL, TR_TRUE) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_7_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_7_Value\n"));
   yy = NODE(NIL, 0) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_6_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_6_Value\n"));
   yy = NODE(CONST, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_5_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_5_Value\n"));
   yy = NODE(STRING, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_4_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_4_Value\n"));
   yy = NODE(STRING, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_3_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_3_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_2_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_2_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_1_Value(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define items yyval[-1]
#define name yyval[-2]
#define v yyval[-3]
  yyprintf((stderr, "do yy_1_Value\n"));
   yy = NODE(VALUE, v) ;
#undef items
#undef name
#undef v
}
YY_ACTION(void) yy_1_Break(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_Break\n"));
   yy = NODE(BREAK, 0) ;
}
YY_ACTION(void) yy_5_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_5_Return\n"));
   yy = NODE(RETURN, 0) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_4_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_4_Return\n"));
   yy = NODE(RETURN, NODE(ARRAY, args)) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_3_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_3_Return\n"));
   yy = NODE(RETURN, NODE(ARRAY, args)) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_2_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_2_Return\n"));
   yy = NODE(RETURN, arg) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_1_Return(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define arg yyval[-2]
  yyprintf((stderr, "do yy_1_Return\n"));
   yy = NODE(RETURN, arg) ;
#undef args
#undef arg
}
YY_ACTION(void) yy_3_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_3_Yield\n"));
   yy = NODE(YIELD, NODES_N(0)) ;
#undef args
}
YY_ACTION(void) yy_2_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_2_Yield\n"));
   yy = NODE(YIELD, args) ;
#undef args
}
YY_ACTION(void) yy_1_Yield(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
  yyprintf((stderr, "do yy_1_Yield\n"));
   yy = NODE(YIELD, args) ;
#undef args
}
YY_ACTION(void) yy_2_Range(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define e yyval[-1]
#define s yyval[-2]
  yyprintf((stderr, "do yy_2_Range\n"));
   yy = NODE3(RANGE, s, e, 1) ;
#undef e
#undef s
}
YY_ACTION(void) yy_1_Range(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define e yyval[-1]
#define s yyval[-2]
  yyprintf((stderr, "do yy_1_Range\n"));
   yy = NODE3(RANGE, s, e, 0) ;
#undef e
#undef s
}
YY_ACTION(void) yy_1_Module(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Module\n"));
   yy = NODE3(MODULE, name, 0, body) ;
#undef body
#undef name
}
YY_ACTION(void) yy_2_Class(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define super yyval[-2]
#define name yyval[-3]
  yyprintf((stderr, "do yy_2_Class\n"));
   yy = NODE3(CLASS, name, super, body) ;
#undef body
#undef super
#undef name
}
YY_ACTION(void) yy_1_Class(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define super yyval[-2]
#define name yyval[-3]
  yyprintf((stderr, "do yy_1_Class\n"));
   super = 0 ;
#undef body
#undef super
#undef name
}
YY_ACTION(void) yy_3_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_3_Param\n"));
   yy = NODE2(PARAM, name, 1) ;
#undef def
#undef name
}
YY_ACTION(void) yy_2_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Param\n"));
   yy = NODE(PARAM, name) ;
#undef def
#undef name
}
YY_ACTION(void) yy_1_Param(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define def yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Param\n"));
   yy = NODE3(PARAM, name, 0, def) ;
#undef def
#undef name
}
YY_ACTION(void) yy_3_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_Params\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_Params\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Params(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_Params\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Def(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define params yyval[-2]
#define method yyval[-3]
  yyprintf((stderr, "do yy_2_Def\n"));
   yy = NODE3(DEF, method, params ? params : NODES_N(0), body) ;
#undef body
#undef params
#undef method
}
YY_ACTION(void) yy_1_Def(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define params yyval[-2]
#define method yyval[-3]
  yyprintf((stderr, "do yy_1_Def\n"));
   params = 0 ;
#undef body
#undef params
#undef method
}
YY_ACTION(void) yy_3_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_3_Method\n"));
   yy = NODE2(METHOD, 0, name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_2_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_2_Method\n"));
   yy = NODE2(METHOD, rcv, name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_1_Method(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define name yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_1_Method\n"));
   yy = NODE2(METHOD, NODE2(SEND, 0, NODE(MSG, rcv)), name) ;
#undef name
#undef rcv
}
YY_ACTION(void) yy_1_Else(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
  yyprintf((stderr, "do yy_1_Else\n"));
   yy = body ;
#undef body
}
YY_ACTION(void) yy_3_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_3_Unless\n"));
   yy = NODE2(UNLESS, cond, NODES(body)) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_2_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_2_Unless\n"));
   yy = NODE3(UNLESS, cond, body, else_body) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_Unless(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_1_Unless\n"));
   else_body = 0 ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_3_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_3_If\n"));
   yy = NODE2(IF, cond, NODES(body)) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_2_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_2_If\n"));
   yy = NODE3(IF, cond, body, else_body) ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_If(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define else_body yyval[-1]
#define body yyval[-2]
#define cond yyval[-3]
  yyprintf((stderr, "do yy_1_If\n"));
   else_body = 0 ;
#undef else_body
#undef body
#undef cond
}
YY_ACTION(void) yy_1_For(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define val yyval[-2]
#define var yyval[-3]
  yyprintf((stderr, "do yy_1_For\n"));
   yy = NODE3(FOR, val, var, body) ;
#undef body
#undef val
#undef var
}
YY_ACTION(void) yy_1_Until(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define cond yyval[-2]
  yyprintf((stderr, "do yy_1_Until\n"));
   yy = NODE2(UNTIL, cond, body) ;
#undef body
#undef cond
}
YY_ACTION(void) yy_1_While(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define body yyval[-1]
#define cond yyval[-2]
  yyprintf((stderr, "do yy_1_While\n"));
   yy = NODE2(WHILE, cond, body) ;
#undef body
#undef cond
}
YY_ACTION(void) yy_7_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_7_Assign\n"));
   yy = NODE2(SETGLOBAL, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_6_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_6_Assign\n"));
   yy = NODE2(SETCVAR, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_5_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_5_Assign\n"));
   yy = NODE2(SETIVAR, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_4_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_4_Assign\n"));
   yy = NODE2(SETCONST, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_3_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_3_Assign\n"));
   yy = NODE2(ASSIGN, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_2_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Assign\n"));
   yy = NODE2(DEC, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_1_Assign(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Assign\n"));
   yy = NODE2(INC, name, val) ;
#undef val
#undef name
}
YY_ACTION(void) yy_2_Block(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define params yyval[-1]
#define body yyval[-2]
  yyprintf((stderr, "do yy_2_Block\n"));
   yy = NODE2(BLOCK, body, params) ;
#undef params
#undef body
}
YY_ACTION(void) yy_1_Block(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define params yyval[-1]
#define body yyval[-2]
  yyprintf((stderr, "do yy_1_Block\n"));
   yy = NODE(BLOCK, body) ;
#undef params
#undef body
}
YY_ACTION(void) yy_5_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_5_Args\n"));
   yy = NODES(NODE2(ARG, splat, 1)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_4_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_4_Args\n"));
   yy = head ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_3_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_3_Args\n"));
   PUSH_NODE(head, NODE2(ARG, splat, 1)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_2_Args\n"));
   PUSH_NODE(head, NODE(ARG, tail)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Args(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define splat yyval[-1]
#define tail yyval[-2]
#define head yyval[-3]
  yyprintf((stderr, "do yy_1_Args\n"));
   head = NODES(NODE(ARG, head)) ;
#undef splat
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Message(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_2_Message\n"));
   yy = NODE2(MSG, name, args) ;
#undef args
#undef name
}
YY_ACTION(void) yy_1_Message(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define args yyval[-1]
#define name yyval[-2]
  yyprintf((stderr, "do yy_1_Message\n"));
   args = 0 ;
#undef args
#undef name
}
YY_ACTION(void) yy_2_UnaryOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_2_UnaryOp\n"));
   yy = NODE(NOT, rcv) ;
#undef rcv
}
YY_ACTION(void) yy_1_UnaryOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_1_UnaryOp\n"));
   yy = NODE(NEG, rcv) ;
#undef rcv
}
YY_ACTION(void) yy_2_LogicOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define arg yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_2_LogicOp\n"));
   yy = NODE2(LOGICOR, rcv, arg) ;
#undef arg
#undef rcv
}
YY_ACTION(void) yy_1_LogicOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define arg yyval[-1]
#define rcv yyval[-2]
  yyprintf((stderr, "do yy_1_LogicOp\n"));
   yy = NODE2(LOGICAND, rcv, arg) ;
#undef arg
#undef rcv
}
YY_ACTION(void) yy_6_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_6_BinOp\n"));
   yy = NODE2(SEND, rcv, NODE2(MSG, op, NODES(NODE(ARG, arg)))) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_5_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_5_BinOp\n"));
   yy = NODE2(LT, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_4_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_4_BinOp\n"));
   yy = NODE2(SUB, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_3_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_3_BinOp\n"));
   yy = NODE2(ADD, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_2_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_2_BinOp\n"));
   yy = NODE2(OR, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_1_BinOp(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define op yyval[-1]
#define arg yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_1_BinOp\n"));
   yy = NODE2(AND, rcv, arg) ;
#undef op
#undef arg
#undef rcv
}
YY_ACTION(void) yy_2_SpecCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define args yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_2_SpecCall\n"));
   yy = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]"), args)) ;
#undef val
#undef args
#undef rcv
}
YY_ACTION(void) yy_1_SpecCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define args yyval[-2]
#define rcv yyval[-3]
  yyprintf((stderr, "do yy_1_SpecCall\n"));
   PUSH_NODE(args, NODE(ARG, val)); yy = NODE2(SEND, rcv, NODE2(MSG, TrSymbol_new(yyvm, "[]="), args)) ;
#undef val
#undef args
#undef rcv
}
YY_ACTION(void) yy_2_Receiver(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_2_Receiver\n"));
   yy = rcv ;
#undef rcv
}
YY_ACTION(void) yy_1_Receiver(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define rcv yyval[-1]
  yyprintf((stderr, "do yy_1_Receiver\n"));
   rcv = 0 ;
#undef rcv
}
YY_ACTION(void) yy_3_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_3_AsgnCall\n"));
   VM = yyvm; yy = NODE2(SEND, rcv, NODE2(MSG, SYMCAT(msg, asg), NODES(NODE(ARG, val)))) ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_2_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_2_AsgnCall\n"));
   rcv = NODE2(SEND, rcv, rmsg) ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_AsgnCall(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define val yyval[-1]
#define asg yyval[-2]
#define msg yyval[-3]
#define rmsg yyval[-4]
#define rcv yyval[-5]
  yyprintf((stderr, "do yy_1_AsgnCall\n"));
   rcv = 0 ;
#undef val
#undef asg
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_3_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_3_Call\n"));
   yy = NODE3(SEND, rcv, msg, block) ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_2_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_2_Call\n"));
   rcv = NODE2(SEND, rcv, rmsg) ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_Call(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define block yyval[-1]
#define msg yyval[-2]
#define rmsg yyval[-3]
#define rcv yyval[-4]
  yyprintf((stderr, "do yy_1_Call\n"));
   block = rcv = 0 ;
#undef block
#undef msg
#undef rmsg
#undef rcv
}
YY_ACTION(void) yy_1_OptStmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
  yyprintf((stderr, "do yy_1_OptStmts\n"));
   yy = NODES_N(0) ;
}
YY_ACTION(void) yy_4_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_4_Stmts\n"));
   yy = NODES_N(0) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_3_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_3_Stmts\n"));
   yy = head ;
#undef tail
#undef head
}
YY_ACTION(void) yy_2_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_2_Stmts\n"));
   PUSH_NODE(head, tail) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Stmts(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define tail yyval[-1]
#define head yyval[-2]
  yyprintf((stderr, "do yy_1_Stmts\n"));
   head = NODES(head) ;
#undef tail
#undef head
}
YY_ACTION(void) yy_1_Root(char *yytext, int yyleng)
{
  (void)yytext; (void)yyleng;
#define s yyval[-1]
  yyprintf((stderr, "do yy_1_Root\n"));
   compiler->node = NODE(ROOT, s) ;
#undef s
}

YY_RULE(int) yy_ESC_CHAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ESC_CHAR"));
  {  int yypos2= yypos, yythunkpos2= yythunkpos;  if (!yymatchString("\\n")) goto l3;  yyDo(yy_1_ESC_CHAR, yybegin, yyend);  goto l2;
  l3:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\b")) goto l4;  yyDo(yy_2_ESC_CHAR, yybegin, yyend);  goto l2;
  l4:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\f")) goto l5;  yyDo(yy_3_ESC_CHAR, yybegin, yyend);  goto l2;
  l5:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\r")) goto l6;  yyDo(yy_4_ESC_CHAR, yybegin, yyend);  goto l2;
  l6:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\t")) goto l7;  yyDo(yy_5_ESC_CHAR, yybegin, yyend);  goto l2;
  l7:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\\"")) goto l8;  yyDo(yy_6_ESC_CHAR, yybegin, yyend);  goto l2;
  l8:;	  yypos= yypos2; yythunkpos= yythunkpos2;  if (!yymatchString("\\\\")) goto l1;  yyDo(yy_7_ESC_CHAR, yybegin, yyend);
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ESC_CHAR", yybuf+yypos));
  return 1;
  l1:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ESC_CHAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_LOGICOP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "LOGICOP"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l9;
  {  int yypos10= yypos, yythunkpos10= yythunkpos;  if (!yymatchString("and")) goto l11;  goto l10;
  l11:;	  yypos= yypos10; yythunkpos= yythunkpos10;  if (!yymatchString("or")) goto l9;
  }
  l10:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l9;  yyDo(yy_1_LOGICOP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "LOGICOP", yybuf+yypos));
  return 1;
  l9:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "LOGICOP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_UNOP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "UNOP"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l12;
  {  int yypos13= yypos, yythunkpos13= yythunkpos;  if (!yymatchString("-@")) goto l14;  goto l13;
  l14:;	  yypos= yypos13; yythunkpos= yythunkpos13;  if (!yymatchChar('!')) goto l12;
  }
  l13:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l12;  yyDo(yy_1_UNOP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "UNOP", yybuf+yypos));
  return 1;
  l12:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UNOP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_NAME()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "NAME"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l15;
  l16:;	
  {  int yypos17= yypos, yythunkpos17= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l17;  goto l16;
  l17:;	  yypos= yypos17; yythunkpos= yythunkpos17;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "NAME", yybuf+yypos));
  return 1;
  l15:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NAME", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_KEYWORD()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "KEYWORD"));
  {  int yypos19= yypos, yythunkpos19= yythunkpos;  if (!yymatchString("while")) goto l20;  goto l19;
  l20:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("until")) goto l21;  goto l19;
  l21:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("for")) goto l22;  goto l19;
  l22:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("do")) goto l23;  goto l19;
  l23:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("end")) goto l24;  goto l19;
  l24:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("if")) goto l25;  goto l19;
  l25:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("unless")) goto l26;  goto l19;
  l26:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("else")) goto l27;  goto l19;
  l27:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("true")) goto l28;  goto l19;
  l28:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("false")) goto l29;  goto l19;
  l29:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("nil")) goto l30;  goto l19;
  l30:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("self")) goto l31;  goto l19;
  l31:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("class")) goto l32;  goto l19;
  l32:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("module")) goto l33;  goto l19;
  l33:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("def")) goto l34;  goto l19;
  l34:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("yield")) goto l35;  goto l19;
  l35:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("return")) goto l36;  goto l19;
  l36:;	  yypos= yypos19; yythunkpos= yythunkpos19;  if (!yymatchString("break")) goto l18;
  }
  l19:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "KEYWORD", yybuf+yypos));
  return 1;
  l18:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "KEYWORD", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_HashItems()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "HashItems"));  if (!yy_Expr()) goto l37;  yyDo(yySet, -3, 0);  if (!yy__()) goto l37;  if (!yymatchString("=>")) goto l37;  if (!yy__()) goto l37;  if (!yy_Expr()) goto l37;  yyDo(yySet, -2, 0);  yyDo(yy_1_HashItems, yybegin, yyend);
  l38:;	
  {  int yypos39= yypos, yythunkpos39= yythunkpos;  if (!yy__()) goto l39;  if (!yymatchChar(',')) goto l39;  if (!yy__()) goto l39;  if (!yy_Expr()) goto l39;  yyDo(yySet, -1, 0);  if (!yy__()) goto l39;  yyDo(yy_2_HashItems, yybegin, yyend);  if (!yymatchString("=>")) goto l39;  if (!yy__()) goto l39;  if (!yy_Expr()) goto l39;  yyDo(yySet, -2, 0);  yyDo(yy_3_HashItems, yybegin, yyend);  goto l38;
  l39:;	  yypos= yypos39; yythunkpos= yythunkpos39;
  }  yyDo(yy_4_HashItems, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "HashItems", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l37:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HashItems", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_STRING2()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "STRING2"));  if (!yymatchChar('"')) goto l40;  yyDo(yy_1_STRING2, yybegin, yyend);
  l41:;	
  {  int yypos42= yypos, yythunkpos42= yythunkpos;
  {  int yypos43= yypos, yythunkpos43= yythunkpos;  if (!yy_ESC_CHAR()) goto l44;  goto l43;
  l44:;	  yypos= yypos43; yythunkpos= yythunkpos43;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l42;  if (!yymatchClass((unsigned char *)"\377\377\377\377\373\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l42;  yyText(yybegin, yyend);  if (!(YY_END)) goto l42;  yyDo(yy_2_STRING2, yybegin, yyend);
  }
  l43:;	  goto l41;
  l42:;	  yypos= yypos42; yythunkpos= yythunkpos42;
  }  if (!yymatchChar('"')) goto l40;  yyDo(yy_3_STRING2, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING2", yybuf+yypos));
  return 1;
  l40:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING2", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_STRING1()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "STRING1"));  if (!yymatchChar('\'')) goto l45;  yyDo(yy_1_STRING1, yybegin, yyend);
  l46:;	
  {  int yypos47= yypos, yythunkpos47= yythunkpos;
  {  int yypos48= yypos, yythunkpos48= yythunkpos;  if (!yymatchString("\\\'")) goto l49;  yyDo(yy_2_STRING1, yybegin, yyend);  goto l48;
  l49:;	  yypos= yypos48; yythunkpos= yythunkpos48;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l47;  if (!yymatchClass((unsigned char *)"\377\377\377\377\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l47;  yyText(yybegin, yyend);  if (!(YY_END)) goto l47;  yyDo(yy_3_STRING1, yybegin, yyend);
  }
  l48:;	  goto l46;
  l47:;	  yypos= yypos47; yythunkpos= yythunkpos47;
  }  if (!yymatchChar('\'')) goto l45;  yyDo(yy_4_STRING1, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "STRING1", yybuf+yypos));
  return 1;
  l45:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "STRING1", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_REGEXP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "REGEXP"));  if (!yymatchChar('/')) goto l50;  yyDo(yy_1_REGEXP, yybegin, yyend);
  l51:;	
  {  int yypos52= yypos, yythunkpos52= yythunkpos;
  {  int yypos53= yypos, yythunkpos53= yythunkpos;  if (!yy_ESC_CHAR()) goto l54;  goto l53;
  l54:;	  yypos= yypos53; yythunkpos= yythunkpos53;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l52;  if (!yymatchClass((unsigned char *)"\377\377\377\377\377\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377")) goto l52;  yyText(yybegin, yyend);  if (!(YY_END)) goto l52;  yyDo(yy_2_REGEXP, yybegin, yyend);
  }
  l53:;	  goto l51;
  l52:;	  yypos= yypos52; yythunkpos= yythunkpos52;
  }  if (!yymatchChar('/')) goto l50;  yyDo(yy_3_REGEXP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "REGEXP", yybuf+yypos));
  return 1;
  l50:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "REGEXP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SYMBOL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SYMBOL"));  if (!yymatchChar(':')) goto l55;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l55;
  {  int yypos56= yypos, yythunkpos56= yythunkpos;  if (!yy_NAME()) goto l57;  goto l56;
  l57:;	  yypos= yypos56; yythunkpos= yythunkpos56;  if (!yy_KEYWORD()) goto l55;
  }
  l56:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l55;  yyDo(yy_1_SYMBOL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "SYMBOL", yybuf+yypos));
  return 1;
  l55:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SYMBOL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_NUMBER()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "NUMBER"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l58;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l58;
  l59:;	
  {  int yypos60= yypos, yythunkpos60= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l60;  goto l59;
  l60:;	  yypos= yypos60; yythunkpos= yythunkpos60;
  }  yyText(yybegin, yyend);  if (!(YY_END)) goto l58;  yyDo(yy_1_NUMBER, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "NUMBER", yybuf+yypos));
  return 1;
  l58:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "NUMBER", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_AryItems()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "AryItems"));  if (!yy__()) goto l61;  if (!yy_Expr()) goto l61;  yyDo(yySet, -2, 0);  if (!yy__()) goto l61;  yyDo(yy_1_AryItems, yybegin, yyend);
  l62:;	
  {  int yypos63= yypos, yythunkpos63= yythunkpos;  if (!yymatchChar(',')) goto l63;  if (!yy__()) goto l63;  if (!yy_Expr()) goto l63;  yyDo(yySet, -1, 0);  if (!yy__()) goto l63;  yyDo(yy_2_AryItems, yybegin, yyend);  goto l62;
  l63:;	  yypos= yypos63; yythunkpos= yythunkpos63;
  }  yyDo(yy_3_AryItems, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "AryItems", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l61:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AryItems", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Param()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Param"));
  {  int yypos65= yypos, yythunkpos65= yythunkpos;  if (!yy__()) goto l66;  if (!yy_ID()) goto l66;  yyDo(yySet, -2, 0);  if (!yy__()) goto l66;  if (!yymatchChar('=')) goto l66;  if (!yy__()) goto l66;  if (!yy_Expr()) goto l66;  yyDo(yySet, -1, 0);  yyDo(yy_1_Param, yybegin, yyend);  goto l65;
  l66:;	  yypos= yypos65; yythunkpos= yythunkpos65;  if (!yy__()) goto l67;  if (!yy_ID()) goto l67;  yyDo(yySet, -2, 0);  if (!yy__()) goto l67;  yyDo(yy_2_Param, yybegin, yyend);  goto l65;
  l67:;	  yypos= yypos65; yythunkpos= yythunkpos65;  if (!yy__()) goto l64;  if (!yymatchChar('*')) goto l64;  if (!yy_ID()) goto l64;  yyDo(yySet, -2, 0);  if (!yy__()) goto l64;  yyDo(yy_3_Param, yybegin, yyend);
  }
  l65:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Param", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l64:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Param", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_METHOD()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "METHOD"));
  {  int yypos69= yypos, yythunkpos69= yythunkpos;  if (!yy_ID()) goto l70;  goto l69;
  l70:;	  yypos= yypos69; yythunkpos= yythunkpos69;  if (!yy_UNOP()) goto l71;  goto l69;
  l71:;	  yypos= yypos69; yythunkpos= yythunkpos69;  if (!yy_BINOP()) goto l72;  goto l69;
  l72:;	  yypos= yypos69; yythunkpos= yythunkpos69;  if (!yy_LOGICOP()) goto l68;
  }
  l69:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "METHOD", yybuf+yypos));
  return 1;
  l68:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "METHOD", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Method()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Method"));
  {  int yypos74= yypos, yythunkpos74= yythunkpos;  if (!yy_ID()) goto l75;  yyDo(yySet, -2, 0);  if (!yymatchChar('.')) goto l75;  if (!yy_METHOD()) goto l75;  yyDo(yySet, -1, 0);  yyDo(yy_1_Method, yybegin, yyend);  goto l74;
  l75:;	  yypos= yypos74; yythunkpos= yythunkpos74;  if (!yy_Value()) goto l76;  yyDo(yySet, -2, 0);  if (!yymatchChar('.')) goto l76;  if (!yy_METHOD()) goto l76;  yyDo(yySet, -1, 0);  yyDo(yy_2_Method, yybegin, yyend);  goto l74;
  l76:;	  yypos= yypos74; yythunkpos= yythunkpos74;  if (!yy_METHOD()) goto l73;  yyDo(yySet, -1, 0);  yyDo(yy_3_Method, yybegin, yyend);
  }
  l74:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Method", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l73:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Method", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Else()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Else"));  if (!yymatchString("else")) goto l77;  if (!yy_SEP()) goto l77;  if (!yy__()) goto l77;  if (!yy_Stmts()) goto l77;  yyDo(yySet, -1, 0);  if (!yy__()) goto l77;  yyDo(yy_1_Else, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Else", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l77:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Else", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_GLOBAL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "GLOBAL"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l78;  if (!yymatchChar('$')) goto l78;  if (!yy_NAME()) goto l78;  yyText(yybegin, yyend);  if (!(YY_END)) goto l78;  yyDo(yy_1_GLOBAL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "GLOBAL", yybuf+yypos));
  return 1;
  l78:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "GLOBAL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_CVAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "CVAR"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l79;  if (!yymatchString("@@")) goto l79;  if (!yy_NAME()) goto l79;  yyText(yybegin, yyend);  if (!(YY_END)) goto l79;  yyDo(yy_1_CVAR, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "CVAR", yybuf+yypos));
  return 1;
  l79:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CVAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_IVAR()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "IVAR"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l80;  if (!yymatchChar('@')) goto l80;  if (!yy_NAME()) goto l80;  yyText(yybegin, yyend);  if (!(YY_END)) goto l80;  yyDo(yy_1_IVAR, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "IVAR", yybuf+yypos));
  return 1;
  l80:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IVAR", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_CONST()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "CONST"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l81;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l81;
  {  int yypos82= yypos, yythunkpos82= yythunkpos;  if (!yy_NAME()) goto l82;  goto l83;
  l82:;	  yypos= yypos82; yythunkpos= yythunkpos82;
  }
  l83:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l81;  yyDo(yy_1_CONST, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "CONST", yybuf+yypos));
  return 1;
  l81:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CONST", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Params()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Params"));  if (!yy_Param()) goto l84;  yyDo(yySet, -2, 0);  yyDo(yy_1_Params, yybegin, yyend);
  l85:;	
  {  int yypos86= yypos, yythunkpos86= yythunkpos;  if (!yymatchChar(',')) goto l86;  if (!yy_Param()) goto l86;  yyDo(yySet, -1, 0);  yyDo(yy_2_Params, yybegin, yyend);  goto l85;
  l86:;	  yypos= yypos86; yythunkpos= yythunkpos86;
  }  yyDo(yy_3_Params, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Params", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l84:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Params", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SPACE()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SPACE"));  if (!yymatchClass((unsigned char *)"\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l87;
  l88:;	
  {  int yypos89= yypos, yythunkpos89= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l89;  goto l88;
  l89:;	  yypos= yypos89; yythunkpos= yythunkpos89;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "SPACE", yybuf+yypos));
  return 1;
  l87:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SPACE", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_BINOP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "BINOP"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l90;
  {  int yypos91= yypos, yythunkpos91= yythunkpos;  if (!yymatchString("**")) goto l92;  goto l91;
  l92:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('^')) goto l93;  goto l91;
  l93:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('&')) goto l94;  goto l91;
  l94:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('|')) goto l95;  goto l91;
  l95:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('~')) goto l96;  goto l91;
  l96:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('+')) goto l97;  goto l91;
  l97:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('-')) goto l98;  goto l91;
  l98:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('*')) goto l99;  goto l91;
  l99:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('/')) goto l100;  goto l91;
  l100:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('%')) goto l101;  goto l91;
  l101:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("<=>")) goto l102;  goto l91;
  l102:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("<<")) goto l103;  goto l91;
  l103:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString(">>")) goto l104;  goto l91;
  l104:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("==")) goto l105;  goto l91;
  l105:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("=~")) goto l106;  goto l91;
  l106:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("!=")) goto l107;  goto l91;
  l107:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("===")) goto l108;  goto l91;
  l108:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('<')) goto l109;  goto l91;
  l109:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchChar('>')) goto l110;  goto l91;
  l110:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString("<=")) goto l111;  goto l91;
  l111:;	  yypos= yypos91; yythunkpos= yythunkpos91;  if (!yymatchString(">=")) goto l90;
  }
  l91:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l90;  yyDo(yy_1_BINOP, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "BINOP", yybuf+yypos));
  return 1;
  l90:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BINOP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Args()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Args"));
  {  int yypos113= yypos, yythunkpos113= yythunkpos;  if (!yy__()) goto l114;  if (!yy_Expr()) goto l114;  yyDo(yySet, -3, 0);  if (!yy__()) goto l114;  yyDo(yy_1_Args, yybegin, yyend);
  l115:;	
  {  int yypos116= yypos, yythunkpos116= yythunkpos;  if (!yymatchChar(',')) goto l116;  if (!yy__()) goto l116;  if (!yy_Expr()) goto l116;  yyDo(yySet, -2, 0);  if (!yy__()) goto l116;  yyDo(yy_2_Args, yybegin, yyend);  goto l115;
  l116:;	  yypos= yypos116; yythunkpos= yythunkpos116;
  }
  {  int yypos117= yypos, yythunkpos117= yythunkpos;  if (!yymatchChar(',')) goto l117;  if (!yy__()) goto l117;  if (!yymatchChar('*')) goto l117;  if (!yy_Expr()) goto l117;  yyDo(yySet, -1, 0);  if (!yy__()) goto l117;  yyDo(yy_3_Args, yybegin, yyend);  goto l118;
  l117:;	  yypos= yypos117; yythunkpos= yythunkpos117;
  }
  l118:;	  yyDo(yy_4_Args, yybegin, yyend);  goto l113;
  l114:;	  yypos= yypos113; yythunkpos= yythunkpos113;  if (!yy__()) goto l112;  if (!yymatchChar('*')) goto l112;  if (!yy_Expr()) goto l112;  yyDo(yySet, -1, 0);  if (!yy__()) goto l112;  yyDo(yy_5_Args, yybegin, yyend);
  }
  l113:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Args", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l112:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Args", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Receiver()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Receiver"));
  {  int yypos120= yypos, yythunkpos120= yythunkpos;  yyDo(yy_1_Receiver, yybegin, yyend);  if (!yy_Call()) goto l121;  yyDo(yySet, -1, 0);  goto l120;
  l121:;	  yypos= yypos120; yythunkpos= yythunkpos120;  if (!yy_Value()) goto l119;  yyDo(yySet, -1, 0);
  }
  l120:;	  yyDo(yy_2_Receiver, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Receiver", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l119:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Receiver", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_ASSIGN()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ASSIGN"));  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l122;  if (!yymatchChar('=')) goto l122;  yyText(yybegin, yyend);  if (!(YY_END)) goto l122;
  {  int yypos123= yypos, yythunkpos123= yythunkpos;
  {  int yypos124= yypos, yythunkpos124= yythunkpos;  if (!yymatchChar('=')) goto l124;  goto l122;
  l124:;	  yypos= yypos124; yythunkpos= yythunkpos124;
  }  yypos= yypos123; yythunkpos= yythunkpos123;
  }  yyDo(yy_1_ASSIGN, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "ASSIGN", yybuf+yypos));
  return 1;
  l122:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ASSIGN", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_ID()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "ID"));
  {  int yypos126= yypos, yythunkpos126= yythunkpos;
  {  int yypos128= yypos, yythunkpos128= yythunkpos;  if (!yymatchString("self")) goto l128;  goto l127;
  l128:;	  yypos= yypos128; yythunkpos= yythunkpos128;
  }  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l127;  if (!yy_KEYWORD()) goto l127;  yyText(yybegin, yyend);  if (!(YY_END)) goto l127;
  {  int yypos129= yypos, yythunkpos129= yythunkpos;
  {  int yypos130= yypos, yythunkpos130= yythunkpos;  if (!yymatchChar('.')) goto l131;  goto l130;
  l131:;	  yypos= yypos130; yythunkpos= yythunkpos130;  if (!yymatchChar('(')) goto l132;  goto l130;
  l132:;	  yypos= yypos130; yythunkpos= yythunkpos130;  if (!yymatchChar('[')) goto l127;
  }
  l130:;	  yypos= yypos129; yythunkpos= yythunkpos129;
  }  yyDo(yy_1_ID, yybegin, yyend);  goto l126;
  l127:;	  yypos= yypos126; yythunkpos= yythunkpos126;  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l133;  if (!yy_KEYWORD()) goto l133;  if (!yy_NAME()) goto l133;  yyText(yybegin, yyend);  if (!(YY_END)) goto l133;  yyDo(yy_2_ID, yybegin, yyend);  goto l126;
  l133:;	  yypos= yypos126; yythunkpos= yythunkpos126;
  {  int yypos134= yypos, yythunkpos134= yythunkpos;  if (!yy_KEYWORD()) goto l134;  goto l125;
  l134:;	  yypos= yypos134; yythunkpos= yythunkpos134;
  }  yyText(yybegin, yyend);  if (!(YY_BEGIN)) goto l125;  if (!yymatchClass((unsigned char *)"\000\000\000\000\000\000\000\000\000\000\000\200\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l125;
  {  int yypos135= yypos, yythunkpos135= yythunkpos;  if (!yy_NAME()) goto l135;  goto l136;
  l135:;	  yypos= yypos135; yythunkpos= yythunkpos135;
  }
  l136:;	
  {  int yypos137= yypos, yythunkpos137= yythunkpos;
  {  int yypos139= yypos, yythunkpos139= yythunkpos;  if (!yymatchChar('=')) goto l140;
  {  int yypos141= yypos, yythunkpos141= yythunkpos;  if (!yymatchChar('(')) goto l140;  yypos= yypos141; yythunkpos= yythunkpos141;
  }  goto l139;
  l140:;	  yypos= yypos139; yythunkpos= yythunkpos139;  if (!yymatchChar('!')) goto l142;  goto l139;
  l142:;	  yypos= yypos139; yythunkpos= yythunkpos139;  if (!yymatchChar('?')) goto l137;
  }
  l139:;	  goto l138;
  l137:;	  yypos= yypos137; yythunkpos= yythunkpos137;
  }
  l138:;	  yyText(yybegin, yyend);  if (!(YY_END)) goto l125;  yyDo(yy_3_ID, yybegin, yyend);
  }
  l126:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "ID", yybuf+yypos));
  return 1;
  l125:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ID", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Block()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Block"));
  {  int yypos144= yypos, yythunkpos144= yythunkpos;  if (!yymatchString("do")) goto l145;  if (!yy_SEP()) goto l145;  if (!yy__()) goto l145;  if (!yy_OptStmts()) goto l145;  yyDo(yySet, -2, 0);  if (!yy__()) goto l145;  if (!yymatchString("end")) goto l145;  yyDo(yy_1_Block, yybegin, yyend);  goto l144;
  l145:;	  yypos= yypos144; yythunkpos= yythunkpos144;  if (!yymatchString("do")) goto l143;  if (!yy__()) goto l143;  if (!yymatchChar('|')) goto l143;  if (!yy_Params()) goto l143;  yyDo(yySet, -1, 0);  if (!yymatchChar('|')) goto l143;  if (!yy_SEP()) goto l143;  if (!yy__()) goto l143;  if (!yy_OptStmts()) goto l143;  yyDo(yySet, -2, 0);  if (!yy__()) goto l143;  if (!yymatchString("end")) goto l143;  yyDo(yy_2_Block, yybegin, yyend);
  }
  l144:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Block", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l143:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Block", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Message()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Message"));  if (!yy_ID()) goto l146;  yyDo(yySet, -2, 0);  yyDo(yy_1_Message, yybegin, yyend);
  {  int yypos147= yypos, yythunkpos147= yythunkpos;
  {  int yypos149= yypos, yythunkpos149= yythunkpos;  if (!yymatchChar('(')) goto l150;
  {  int yypos151= yypos, yythunkpos151= yythunkpos;  if (!yy_Args()) goto l151;  yyDo(yySet, -1, 0);  goto l152;
  l151:;	  yypos= yypos151; yythunkpos= yythunkpos151;
  }
  l152:;	  if (!yymatchChar(')')) goto l150;  goto l149;
  l150:;	  yypos= yypos149; yythunkpos= yythunkpos149;  if (!yy_SPACE()) goto l147;  if (!yy_Args()) goto l147;  yyDo(yySet, -1, 0);
  }
  l149:;	  goto l148;
  l147:;	  yypos= yypos147; yythunkpos= yythunkpos147;
  }
  l148:;	  yyDo(yy_2_Message, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Message", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l146:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Message", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_EOL()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "EOL"));
  {  int yypos154= yypos, yythunkpos154= yythunkpos;  if (!yymatchChar('\n')) goto l155;  goto l154;
  l155:;	  yypos= yypos154; yythunkpos= yythunkpos154;  if (!yymatchString("\r\n")) goto l156;  goto l154;
  l156:;	  yypos= yypos154; yythunkpos= yythunkpos154;  if (!yymatchChar('\r')) goto l153;
  }
  l154:;	  yyDo(yy_1_EOL, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "EOL", yybuf+yypos));
  return 1;
  l153:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOL", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Value()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Value"));
  {  int yypos158= yypos, yythunkpos158= yythunkpos;  if (!yy_NUMBER()) goto l159;  yyDo(yySet, -3, 0);  yyDo(yy_1_Value, yybegin, yyend);  goto l158;
  l159:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_SYMBOL()) goto l160;  yyDo(yySet, -3, 0);  yyDo(yy_2_Value, yybegin, yyend);  goto l158;
  l160:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_REGEXP()) goto l161;  yyDo(yySet, -3, 0);  yyDo(yy_3_Value, yybegin, yyend);  goto l158;
  l161:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_STRING1()) goto l162;  yyDo(yySet, -3, 0);  yyDo(yy_4_Value, yybegin, yyend);  goto l158;
  l162:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_STRING2()) goto l163;  yyDo(yySet, -3, 0);  yyDo(yy_5_Value, yybegin, yyend);  goto l158;
  l163:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_CONST()) goto l164;  yyDo(yySet, -3, 0);  yyDo(yy_6_Value, yybegin, yyend);  goto l158;
  l164:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchString("nil")) goto l165;  yyDo(yy_7_Value, yybegin, yyend);  goto l158;
  l165:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchString("true")) goto l166;  yyDo(yy_8_Value, yybegin, yyend);  goto l158;
  l166:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchString("false")) goto l167;  yyDo(yy_9_Value, yybegin, yyend);  goto l158;
  l167:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchString("self")) goto l168;  yyDo(yy_10_Value, yybegin, yyend);  goto l158;
  l168:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_IVAR()) goto l169;  yyDo(yySet, -2, 0);  yyDo(yy_11_Value, yybegin, yyend);  goto l158;
  l169:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_CVAR()) goto l170;  yyDo(yySet, -2, 0);  yyDo(yy_12_Value, yybegin, yyend);  goto l158;
  l170:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yy_GLOBAL()) goto l171;  yyDo(yySet, -2, 0);  yyDo(yy_13_Value, yybegin, yyend);  goto l158;
  l171:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchChar('[')) goto l172;  if (!yy__()) goto l172;  if (!yymatchChar(']')) goto l172;  yyDo(yy_14_Value, yybegin, yyend);  goto l158;
  l172:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchChar('[')) goto l173;  if (!yy__()) goto l173;  if (!yy_AryItems()) goto l173;  yyDo(yySet, -1, 0);  if (!yy__()) goto l173;  if (!yymatchChar(']')) goto l173;  yyDo(yy_15_Value, yybegin, yyend);  goto l158;
  l173:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchChar('{')) goto l174;  if (!yy__()) goto l174;  if (!yymatchChar('}')) goto l174;  yyDo(yy_16_Value, yybegin, yyend);  goto l158;
  l174:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchChar('{')) goto l175;  if (!yy__()) goto l175;  if (!yy_HashItems()) goto l175;  yyDo(yySet, -1, 0);  if (!yy__()) goto l175;  if (!yymatchChar('}')) goto l175;  yyDo(yy_17_Value, yybegin, yyend);  goto l158;
  l175:;	  yypos= yypos158; yythunkpos= yythunkpos158;  if (!yymatchChar('(')) goto l157;  if (!yy__()) goto l157;  if (!yy_Expr()) goto l157;  if (!yy__()) goto l157;  if (!yymatchChar(')')) goto l157;
  }
  l158:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Value", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l157:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Value", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Break()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Break"));  if (!yymatchString("break")) goto l176;  yyDo(yy_1_Break, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Break", yybuf+yypos));
  return 1;
  l176:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Break", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Return()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Return"));
  {  int yypos178= yypos, yythunkpos178= yythunkpos;  if (!yymatchString("return")) goto l179;  if (!yy_SPACE()) goto l179;  if (!yy_Expr()) goto l179;  yyDo(yySet, -2, 0);  if (!yy__()) goto l179;
  {  int yypos180= yypos, yythunkpos180= yythunkpos;  if (!yymatchChar(',')) goto l180;  goto l179;
  l180:;	  yypos= yypos180; yythunkpos= yythunkpos180;
  }  yyDo(yy_1_Return, yybegin, yyend);  goto l178;
  l179:;	  yypos= yypos178; yythunkpos= yythunkpos178;  if (!yymatchString("return")) goto l181;  if (!yymatchChar('(')) goto l181;  if (!yy_Expr()) goto l181;  yyDo(yySet, -2, 0);  if (!yymatchChar(')')) goto l181;  if (!yy__()) goto l181;
  {  int yypos182= yypos, yythunkpos182= yythunkpos;  if (!yymatchChar(',')) goto l182;  goto l181;
  l182:;	  yypos= yypos182; yythunkpos= yythunkpos182;
  }  yyDo(yy_2_Return, yybegin, yyend);  goto l178;
  l181:;	  yypos= yypos178; yythunkpos= yythunkpos178;  if (!yymatchString("return")) goto l183;  if (!yy_SPACE()) goto l183;  if (!yy_AryItems()) goto l183;  yyDo(yySet, -1, 0);  yyDo(yy_3_Return, yybegin, yyend);  goto l178;
  l183:;	  yypos= yypos178; yythunkpos= yythunkpos178;  if (!yymatchString("return")) goto l184;  if (!yymatchChar('(')) goto l184;  if (!yy_AryItems()) goto l184;  yyDo(yySet, -1, 0);  if (!yymatchChar(')')) goto l184;  yyDo(yy_4_Return, yybegin, yyend);  goto l178;
  l184:;	  yypos= yypos178; yythunkpos= yythunkpos178;  if (!yymatchString("return")) goto l177;  yyDo(yy_5_Return, yybegin, yyend);
  }
  l178:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Return", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l177:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Return", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Yield()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Yield"));
  {  int yypos186= yypos, yythunkpos186= yythunkpos;  if (!yymatchString("yield")) goto l187;  if (!yy_SPACE()) goto l187;  if (!yy_AryItems()) goto l187;  yyDo(yySet, -1, 0);  yyDo(yy_1_Yield, yybegin, yyend);  goto l186;
  l187:;	  yypos= yypos186; yythunkpos= yythunkpos186;  if (!yymatchString("yield")) goto l188;  if (!yymatchChar('(')) goto l188;  if (!yy_AryItems()) goto l188;  yyDo(yySet, -1, 0);  if (!yymatchChar(')')) goto l188;  yyDo(yy_2_Yield, yybegin, yyend);  goto l186;
  l188:;	  yypos= yypos186; yythunkpos= yythunkpos186;  if (!yymatchString("yield")) goto l185;  yyDo(yy_3_Yield, yybegin, yyend);
  }
  l186:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Yield", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l185:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Yield", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Range()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Range"));
  {  int yypos190= yypos, yythunkpos190= yythunkpos;  if (!yy_Receiver()) goto l191;  yyDo(yySet, -2, 0);  if (!yy__()) goto l191;  if (!yymatchString("..")) goto l191;  if (!yy__()) goto l191;  if (!yy_Expr()) goto l191;  yyDo(yySet, -1, 0);  yyDo(yy_1_Range, yybegin, yyend);  goto l190;
  l191:;	  yypos= yypos190; yythunkpos= yythunkpos190;  if (!yy_Receiver()) goto l189;  yyDo(yySet, -2, 0);  if (!yy__()) goto l189;  if (!yymatchString("...")) goto l189;  if (!yy__()) goto l189;  if (!yy_Expr()) goto l189;  yyDo(yySet, -1, 0);  yyDo(yy_2_Range, yybegin, yyend);
  }
  l190:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Range", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l189:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Range", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Call()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 4, 0);
  yyprintf((stderr, "%s\n", "Call"));  yyDo(yy_1_Call, yybegin, yyend);
  {  int yypos193= yypos, yythunkpos193= yythunkpos;  if (!yy_Value()) goto l193;  yyDo(yySet, -4, 0);  if (!yymatchChar('.')) goto l193;  goto l194;
  l193:;	  yypos= yypos193; yythunkpos= yythunkpos193;
  }
  l194:;	
  l195:;	
  {  int yypos196= yypos, yythunkpos196= yythunkpos;  if (!yy_Message()) goto l196;  yyDo(yySet, -3, 0);  if (!yymatchChar('.')) goto l196;  yyDo(yy_2_Call, yybegin, yyend);  goto l195;
  l196:;	  yypos= yypos196; yythunkpos= yythunkpos196;
  }  if (!yy_Message()) goto l192;  yyDo(yySet, -2, 0);  if (!yy__()) goto l192;
  {  int yypos197= yypos, yythunkpos197= yythunkpos;  if (!yy_Block()) goto l197;  yyDo(yySet, -1, 0);  goto l198;
  l197:;	  yypos= yypos197; yythunkpos= yythunkpos197;
  }
  l198:;	  yyDo(yy_3_Call, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Call", yybuf+yypos));  yyDo(yyPop, 4, 0);
  return 1;
  l192:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Call", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_SpecCall()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "SpecCall"));
  {  int yypos200= yypos, yythunkpos200= yythunkpos;  if (!yy_Receiver()) goto l201;  yyDo(yySet, -3, 0);  if (!yymatchChar('[')) goto l201;  if (!yy_Args()) goto l201;  yyDo(yySet, -2, 0);  if (!yymatchChar(']')) goto l201;  if (!yy__()) goto l201;  if (!yy_ASSIGN()) goto l201;  if (!yy__()) goto l201;  if (!yy_Stmt()) goto l201;  yyDo(yySet, -1, 0);  yyDo(yy_1_SpecCall, yybegin, yyend);  goto l200;
  l201:;	  yypos= yypos200; yythunkpos= yythunkpos200;  if (!yy_Receiver()) goto l199;  yyDo(yySet, -3, 0);  if (!yymatchChar('[')) goto l199;  if (!yy_Args()) goto l199;  yyDo(yySet, -2, 0);  if (!yymatchChar(']')) goto l199;  yyDo(yy_2_SpecCall, yybegin, yyend);
  }
  l200:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "SpecCall", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l199:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SpecCall", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_BinOp()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "BinOp"));
  {  int yypos203= yypos, yythunkpos203= yythunkpos;  if (!yy_SpecCall()) goto l204;  yyDo(yySet, -3, 0);  goto l203;
  l204:;	  yypos= yypos203; yythunkpos= yythunkpos203;  if (!yy_Receiver()) goto l202;  yyDo(yySet, -3, 0);
  }
  l203:;	  if (!yy__()) goto l202;
  {  int yypos205= yypos, yythunkpos205= yythunkpos;  if (!yymatchString("&&")) goto l206;  if (!yy__()) goto l206;  if (!yy_Expr()) goto l206;  yyDo(yySet, -2, 0);  yyDo(yy_1_BinOp, yybegin, yyend);  goto l205;
  l206:;	  yypos= yypos205; yythunkpos= yythunkpos205;  if (!yymatchString("||")) goto l207;  if (!yy__()) goto l207;  if (!yy_Expr()) goto l207;  yyDo(yySet, -2, 0);  yyDo(yy_2_BinOp, yybegin, yyend);  goto l205;
  l207:;	  yypos= yypos205; yythunkpos= yythunkpos205;  if (!yymatchChar('+')) goto l208;  if (!yy__()) goto l208;  if (!yy_Expr()) goto l208;  yyDo(yySet, -2, 0);  yyDo(yy_3_BinOp, yybegin, yyend);  goto l205;
  l208:;	  yypos= yypos205; yythunkpos= yythunkpos205;  if (!yymatchChar('-')) goto l209;  if (!yy__()) goto l209;  if (!yy_Expr()) goto l209;  yyDo(yySet, -2, 0);  yyDo(yy_4_BinOp, yybegin, yyend);  goto l205;
  l209:;	  yypos= yypos205; yythunkpos= yythunkpos205;  if (!yymatchChar('<')) goto l210;  if (!yy__()) goto l210;  if (!yy_Expr()) goto l210;  yyDo(yySet, -2, 0);  yyDo(yy_5_BinOp, yybegin, yyend);  goto l205;
  l210:;	  yypos= yypos205; yythunkpos= yythunkpos205;  if (!yy_BINOP()) goto l202;  yyDo(yySet, -1, 0);  if (!yy__()) goto l202;  if (!yy_Expr()) goto l202;  yyDo(yySet, -2, 0);  yyDo(yy_6_BinOp, yybegin, yyend);
  }
  l205:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "BinOp", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l202:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "BinOp", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_UnaryOp()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "UnaryOp"));
  {  int yypos212= yypos, yythunkpos212= yythunkpos;  if (!yymatchChar('-')) goto l213;  if (!yy_Expr()) goto l213;  yyDo(yySet, -1, 0);  yyDo(yy_1_UnaryOp, yybegin, yyend);  goto l212;
  l213:;	  yypos= yypos212; yythunkpos= yythunkpos212;  if (!yymatchChar('!')) goto l211;  if (!yy_Expr()) goto l211;  yyDo(yySet, -1, 0);  yyDo(yy_2_UnaryOp, yybegin, yyend);
  }
  l212:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "UnaryOp", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l211:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UnaryOp", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_AsgnCall()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 5, 0);
  yyprintf((stderr, "%s\n", "AsgnCall"));  yyDo(yy_1_AsgnCall, yybegin, yyend);
  {  int yypos215= yypos, yythunkpos215= yythunkpos;  if (!yy_Value()) goto l215;  yyDo(yySet, -5, 0);  if (!yymatchChar('.')) goto l215;  goto l216;
  l215:;	  yypos= yypos215; yythunkpos= yythunkpos215;
  }
  l216:;	
  l217:;	
  {  int yypos218= yypos, yythunkpos218= yythunkpos;  if (!yy_Message()) goto l218;  yyDo(yySet, -4, 0);  if (!yymatchChar('.')) goto l218;  yyDo(yy_2_AsgnCall, yybegin, yyend);  goto l217;
  l218:;	  yypos= yypos218; yythunkpos= yythunkpos218;
  }  if (!yy_ID()) goto l214;  yyDo(yySet, -3, 0);  if (!yy__()) goto l214;  if (!yy_ASSIGN()) goto l214;  yyDo(yySet, -2, 0);  if (!yy__()) goto l214;  if (!yy_Stmt()) goto l214;  yyDo(yySet, -1, 0);  yyDo(yy_3_AsgnCall, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "AsgnCall", yybuf+yypos));  yyDo(yyPop, 5, 0);
  return 1;
  l214:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AsgnCall", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Assign()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Assign"));
  {  int yypos220= yypos, yythunkpos220= yythunkpos;  if (!yy_ID()) goto l221;  yyDo(yySet, -2, 0);  if (!yy__()) goto l221;  if (!yymatchString("+=")) goto l221;  if (!yy__()) goto l221;  if (!yy_Stmt()) goto l221;  yyDo(yySet, -1, 0);  yyDo(yy_1_Assign, yybegin, yyend);  goto l220;
  l221:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_ID()) goto l222;  yyDo(yySet, -2, 0);  if (!yy__()) goto l222;  if (!yymatchString("-=")) goto l222;  if (!yy__()) goto l222;  if (!yy_Stmt()) goto l222;  yyDo(yySet, -1, 0);  yyDo(yy_2_Assign, yybegin, yyend);  goto l220;
  l222:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_ID()) goto l223;  yyDo(yySet, -2, 0);  if (!yy__()) goto l223;  if (!yy_ASSIGN()) goto l223;  if (!yy__()) goto l223;  if (!yy_Stmt()) goto l223;  yyDo(yySet, -1, 0);  yyDo(yy_3_Assign, yybegin, yyend);  goto l220;
  l223:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_CONST()) goto l224;  yyDo(yySet, -2, 0);  if (!yy__()) goto l224;  if (!yy_ASSIGN()) goto l224;  if (!yy__()) goto l224;  if (!yy_Stmt()) goto l224;  yyDo(yySet, -1, 0);  yyDo(yy_4_Assign, yybegin, yyend);  goto l220;
  l224:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_IVAR()) goto l225;  yyDo(yySet, -2, 0);  if (!yy__()) goto l225;  if (!yy_ASSIGN()) goto l225;  if (!yy__()) goto l225;  if (!yy_Stmt()) goto l225;  yyDo(yySet, -1, 0);  yyDo(yy_5_Assign, yybegin, yyend);  goto l220;
  l225:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_CVAR()) goto l226;  yyDo(yySet, -2, 0);  if (!yy__()) goto l226;  if (!yy_ASSIGN()) goto l226;  if (!yy__()) goto l226;  if (!yy_Stmt()) goto l226;  yyDo(yySet, -1, 0);  yyDo(yy_6_Assign, yybegin, yyend);  goto l220;
  l226:;	  yypos= yypos220; yythunkpos= yythunkpos220;  if (!yy_GLOBAL()) goto l219;  yyDo(yySet, -2, 0);  if (!yy__()) goto l219;  if (!yy_ASSIGN()) goto l219;  if (!yy__()) goto l219;  if (!yy_Stmt()) goto l219;  yyDo(yySet, -1, 0);  yyDo(yy_7_Assign, yybegin, yyend);
  }
  l220:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Assign", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l219:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Assign", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Expr()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Expr"));
  {  int yypos228= yypos, yythunkpos228= yythunkpos;  if (!yy_Assign()) goto l229;  goto l228;
  l229:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_AsgnCall()) goto l230;  goto l228;
  l230:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_UnaryOp()) goto l231;  goto l228;
  l231:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_BinOp()) goto l232;  goto l228;
  l232:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_SpecCall()) goto l233;  goto l228;
  l233:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Call()) goto l234;  goto l228;
  l234:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Range()) goto l235;  goto l228;
  l235:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Yield()) goto l236;  goto l228;
  l236:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Return()) goto l237;  goto l228;
  l237:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Break()) goto l238;  goto l228;
  l238:;	  yypos= yypos228; yythunkpos= yythunkpos228;  if (!yy_Value()) goto l227;
  }
  l228:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Expr", yybuf+yypos));
  return 1;
  l227:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Expr", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Module()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Module"));  if (!yymatchString("module")) goto l239;  if (!yy_SPACE()) goto l239;  if (!yy_CONST()) goto l239;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l239;  if (!yy_OptStmts()) goto l239;  yyDo(yySet, -1, 0);  if (!yy__()) goto l239;  if (!yymatchString("end")) goto l239;  yyDo(yy_1_Module, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Module", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l239:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Module", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Class()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Class"));  if (!yymatchString("class")) goto l240;  if (!yy_SPACE()) goto l240;  if (!yy_CONST()) goto l240;  yyDo(yySet, -3, 0);  yyDo(yy_1_Class, yybegin, yyend);
  {  int yypos241= yypos, yythunkpos241= yythunkpos;  if (!yy__()) goto l241;  if (!yymatchChar('<')) goto l241;  if (!yy__()) goto l241;  if (!yy_CONST()) goto l241;  yyDo(yySet, -2, 0);  goto l242;
  l241:;	  yypos= yypos241; yythunkpos= yythunkpos241;
  }
  l242:;	  if (!yy_SEP()) goto l240;  if (!yy_OptStmts()) goto l240;  yyDo(yySet, -1, 0);  if (!yy__()) goto l240;  if (!yymatchString("end")) goto l240;  yyDo(yy_2_Class, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Class", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l240:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Class", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Def()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Def"));  if (!yymatchString("def")) goto l243;  if (!yy_SPACE()) goto l243;  if (!yy_Method()) goto l243;  yyDo(yySet, -3, 0);  yyDo(yy_1_Def, yybegin, yyend);
  {  int yypos244= yypos, yythunkpos244= yythunkpos;  if (!yy__()) goto l244;  if (!yymatchChar('(')) goto l244;
  {  int yypos246= yypos, yythunkpos246= yythunkpos;  if (!yy_Params()) goto l246;  yyDo(yySet, -2, 0);  goto l247;
  l246:;	  yypos= yypos246; yythunkpos= yythunkpos246;
  }
  l247:;	  if (!yymatchChar(')')) goto l244;  goto l245;
  l244:;	  yypos= yypos244; yythunkpos= yythunkpos244;
  }
  l245:;	  if (!yy_SEP()) goto l243;  if (!yy_OptStmts()) goto l243;  yyDo(yySet, -1, 0);  if (!yy__()) goto l243;  if (!yymatchString("end")) goto l243;  yyDo(yy_2_Def, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Def", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l243:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Def", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Unless()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "Unless"));
  {  int yypos249= yypos, yythunkpos249= yythunkpos;  if (!yymatchString("unless")) goto l250;  if (!yy_SPACE()) goto l250;  if (!yy_Expr()) goto l250;  yyDo(yySet, -3, 0);  if (!yy_SEP()) goto l250;  yyDo(yy_1_Unless, yybegin, yyend);  if (!yy_Stmts()) goto l250;  yyDo(yySet, -2, 0);  if (!yy__()) goto l250;
  {  int yypos251= yypos, yythunkpos251= yythunkpos;  if (!yy_Else()) goto l251;  yyDo(yySet, -1, 0);  goto l252;
  l251:;	  yypos= yypos251; yythunkpos= yythunkpos251;
  }
  l252:;	  if (!yymatchString("end")) goto l250;  yyDo(yy_2_Unless, yybegin, yyend);  goto l249;
  l250:;	  yypos= yypos249; yythunkpos= yythunkpos249;  if (!yy_Expr()) goto l248;  yyDo(yySet, -2, 0);  if (!yy__()) goto l248;  if (!yymatchString("unless")) goto l248;  if (!yy__()) goto l248;  if (!yy_Expr()) goto l248;  yyDo(yySet, -3, 0);  yyDo(yy_3_Unless, yybegin, yyend);
  }
  l249:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Unless", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l248:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Unless", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_If()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "If"));
  {  int yypos254= yypos, yythunkpos254= yythunkpos;  if (!yymatchString("if")) goto l255;  if (!yy_SPACE()) goto l255;  if (!yy_Expr()) goto l255;  yyDo(yySet, -3, 0);  if (!yy_SEP()) goto l255;  yyDo(yy_1_If, yybegin, yyend);  if (!yy_Stmts()) goto l255;  yyDo(yySet, -2, 0);  if (!yy__()) goto l255;
  {  int yypos256= yypos, yythunkpos256= yythunkpos;  if (!yy_Else()) goto l256;  yyDo(yySet, -1, 0);  goto l257;
  l256:;	  yypos= yypos256; yythunkpos= yythunkpos256;
  }
  l257:;	  if (!yymatchString("end")) goto l255;  yyDo(yy_2_If, yybegin, yyend);  goto l254;
  l255:;	  yypos= yypos254; yythunkpos= yythunkpos254;  if (!yy_Expr()) goto l253;  yyDo(yySet, -2, 0);  if (!yy__()) goto l253;  if (!yymatchString("if")) goto l253;  if (!yy__()) goto l253;  if (!yy_Expr()) goto l253;  yyDo(yySet, -3, 0);  yyDo(yy_3_If, yybegin, yyend);
  }
  l254:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "If", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l253:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "If", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_For()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 3, 0);
  yyprintf((stderr, "%s\n", "For"));  if (!yymatchString("for")) goto l258;  if (!yy_SPACE()) goto l258;  if (!yy_ID()) goto l258;  yyDo(yySet, -3, 0);  if (!yy_SPACE()) goto l258;  if (!yymatchString("in")) goto l258;  if (!yy_SPACE()) goto l258;  if (!yy_Expr()) goto l258;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l258;  if (!yy_Stmts()) goto l258;  yyDo(yySet, -1, 0);  if (!yy__()) goto l258;  if (!yymatchString("end")) goto l258;  yyDo(yy_1_For, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "For", yybuf+yypos));  yyDo(yyPop, 3, 0);
  return 1;
  l258:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "For", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Until()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Until"));  if (!yymatchString("until")) goto l259;  if (!yy_SPACE()) goto l259;  if (!yy_Expr()) goto l259;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l259;  if (!yy_Stmts()) goto l259;  yyDo(yySet, -1, 0);  if (!yy__()) goto l259;  if (!yymatchString("end")) goto l259;  yyDo(yy_1_Until, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Until", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l259:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Until", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_While()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "While"));  if (!yymatchString("while")) goto l260;  if (!yy_SPACE()) goto l260;  if (!yy_Expr()) goto l260;  yyDo(yySet, -2, 0);  if (!yy_SEP()) goto l260;  if (!yy_Stmts()) goto l260;  yyDo(yySet, -1, 0);  if (!yy__()) goto l260;  if (!yymatchString("end")) goto l260;  yyDo(yy_1_While, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "While", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l260:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "While", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_LogicOp()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "LogicOp"));
  {  int yypos262= yypos, yythunkpos262= yythunkpos;  if (!yy_UnaryOp()) goto l263;  yyDo(yySet, -2, 0);  goto l262;
  l263:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_BinOp()) goto l264;  yyDo(yySet, -2, 0);  goto l262;
  l264:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_SpecCall()) goto l265;  yyDo(yySet, -2, 0);  goto l262;
  l265:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Call()) goto l266;  yyDo(yySet, -2, 0);  goto l262;
  l266:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Range()) goto l267;  yyDo(yySet, -2, 0);  goto l262;
  l267:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Yield()) goto l268;  yyDo(yySet, -2, 0);  goto l262;
  l268:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Return()) goto l269;  yyDo(yySet, -2, 0);  goto l262;
  l269:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Break()) goto l270;  yyDo(yySet, -2, 0);  goto l262;
  l270:;	  yypos= yypos262; yythunkpos= yythunkpos262;  if (!yy_Value()) goto l261;  yyDo(yySet, -2, 0);
  }
  l262:;	  if (!yy__()) goto l261;
  {  int yypos271= yypos, yythunkpos271= yythunkpos;  if (!yymatchString("and")) goto l272;  if (!yy__()) goto l272;  if (!yy_Expr()) goto l272;  yyDo(yySet, -1, 0);  yyDo(yy_1_LogicOp, yybegin, yyend);  goto l271;
  l272:;	  yypos= yypos271; yythunkpos= yythunkpos271;  if (!yymatchString("or")) goto l261;  if (!yy__()) goto l261;  if (!yy_Expr()) goto l261;  yyDo(yySet, -1, 0);  yyDo(yy_2_LogicOp, yybegin, yyend);
  }
  l271:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "LogicOp", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l261:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "LogicOp", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_OptStmts()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "OptStmts"));
  {  int yypos274= yypos, yythunkpos274= yythunkpos;  if (!yy_Stmts()) goto l275;  goto l274;
  l275:;	  yypos= yypos274; yythunkpos= yythunkpos274;  if (!yy__()) goto l273;
  {  int yypos276= yypos, yythunkpos276= yythunkpos;  if (!yy_SEP()) goto l276;  goto l277;
  l276:;	  yypos= yypos276; yythunkpos= yythunkpos276;
  }
  l277:;	  yyDo(yy_1_OptStmts, yybegin, yyend);
  }
  l274:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "OptStmts", yybuf+yypos));
  return 1;
  l273:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OptStmts", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Comment()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yy__()) goto l278;  if (!yymatchChar('#')) goto l278;
  l279:;	
  {  int yypos280= yypos, yythunkpos280= yythunkpos;
  {  int yypos281= yypos, yythunkpos281= yythunkpos;  if (!yy_EOL()) goto l281;  goto l280;
  l281:;	  yypos= yypos281; yythunkpos= yythunkpos281;
  }  if (!yymatchDot()) goto l280;  goto l279;
  l280:;	  yypos= yypos280; yythunkpos= yythunkpos280;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yybuf+yypos));
  return 1;
  l278:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Stmt()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "Stmt"));
  {  int yypos283= yypos, yythunkpos283= yythunkpos;  if (!yy_LogicOp()) goto l284;  goto l283;
  l284:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_While()) goto l285;  goto l283;
  l285:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Until()) goto l286;  goto l283;
  l286:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_For()) goto l287;  goto l283;
  l287:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_If()) goto l288;  goto l283;
  l288:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Unless()) goto l289;  goto l283;
  l289:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Def()) goto l290;  goto l283;
  l290:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Class()) goto l291;  goto l283;
  l291:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Module()) goto l292;  goto l283;
  l292:;	  yypos= yypos283; yythunkpos= yythunkpos283;  if (!yy_Expr()) goto l282;
  }
  l283:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmt", yybuf+yypos));
  return 1;
  l282:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmt", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy__()
{
  yyprintf((stderr, "%s\n", "_"));
  l294:;	
  {  int yypos295= yypos, yythunkpos295= yythunkpos;  if (!yymatchClass((unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l295;  goto l294;
  l295:;	  yypos= yypos295; yythunkpos= yythunkpos295;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "_", yybuf+yypos));
  return 1;
}
YY_RULE(int) yy_SEP()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "SEP"));  if (!yy__()) goto l296;
  {  int yypos299= yypos, yythunkpos299= yythunkpos;  if (!yy_Comment()) goto l299;  goto l300;
  l299:;	  yypos= yypos299; yythunkpos= yythunkpos299;
  }
  l300:;	
  {  int yypos301= yypos, yythunkpos301= yythunkpos;  if (!yy_EOL()) goto l302;  goto l301;
  l302:;	  yypos= yypos301; yythunkpos= yythunkpos301;  if (!yymatchChar(';')) goto l296;
  }
  l301:;	
  l297:;	
  {  int yypos298= yypos, yythunkpos298= yythunkpos;  if (!yy__()) goto l298;
  {  int yypos303= yypos, yythunkpos303= yythunkpos;  if (!yy_Comment()) goto l303;  goto l304;
  l303:;	  yypos= yypos303; yythunkpos= yythunkpos303;
  }
  l304:;	
  {  int yypos305= yypos, yythunkpos305= yythunkpos;  if (!yy_EOL()) goto l306;  goto l305;
  l306:;	  yypos= yypos305; yythunkpos= yythunkpos305;  if (!yymatchChar(';')) goto l298;
  }
  l305:;	  goto l297;
  l298:;	  yypos= yypos298; yythunkpos= yythunkpos298;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "SEP", yybuf+yypos));
  return 1;
  l296:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SEP", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_EOF()
{  int yypos0= yypos, yythunkpos0= yythunkpos;
  yyprintf((stderr, "%s\n", "EOF"));
  {  int yypos308= yypos, yythunkpos308= yythunkpos;  if (!yymatchDot()) goto l308;  goto l307;
  l308:;	  yypos= yypos308; yythunkpos= yythunkpos308;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "EOF", yybuf+yypos));
  return 1;
  l307:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "EOF", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Stmts()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 2, 0);
  yyprintf((stderr, "%s\n", "Stmts"));
  {  int yypos310= yypos, yythunkpos310= yythunkpos;
  l312:;	
  {  int yypos313= yypos, yythunkpos313= yythunkpos;  if (!yy_SEP()) goto l313;  goto l312;
  l313:;	  yypos= yypos313; yythunkpos= yythunkpos313;
  }  if (!yy__()) goto l311;  if (!yy_Stmt()) goto l311;  yyDo(yySet, -2, 0);
  {  int yypos314= yypos, yythunkpos314= yythunkpos;  if (!yy_Comment()) goto l314;  goto l315;
  l314:;	  yypos= yypos314; yythunkpos= yythunkpos314;
  }
  l315:;	  yyDo(yy_1_Stmts, yybegin, yyend);
  l316:;	
  {  int yypos317= yypos, yythunkpos317= yythunkpos;
  {  int yypos318= yypos, yythunkpos318= yythunkpos;  if (!yy_SEP()) goto l319;  if (!yy__()) goto l319;  if (!yy_Stmt()) goto l319;  yyDo(yySet, -1, 0);
  {  int yypos320= yypos, yythunkpos320= yythunkpos;  if (!yy_Comment()) goto l320;  goto l321;
  l320:;	  yypos= yypos320; yythunkpos= yythunkpos320;
  }
  l321:;	  yyDo(yy_2_Stmts, yybegin, yyend);  goto l318;
  l319:;	  yypos= yypos318; yythunkpos= yythunkpos318;  if (!yy_SEP()) goto l317;  if (!yy__()) goto l317;  if (!yy_Comment()) goto l317;
  }
  l318:;	  goto l316;
  l317:;	  yypos= yypos317; yythunkpos= yythunkpos317;
  }
  {  int yypos322= yypos, yythunkpos322= yythunkpos;  if (!yy_SEP()) goto l322;  goto l323;
  l322:;	  yypos= yypos322; yythunkpos= yythunkpos322;
  }
  l323:;	  yyDo(yy_3_Stmts, yybegin, yyend);  goto l310;
  l311:;	  yypos= yypos310; yythunkpos= yythunkpos310;  if (!yy_SEP()) goto l309;
  l324:;	
  {  int yypos325= yypos, yythunkpos325= yythunkpos;  if (!yy_SEP()) goto l325;  goto l324;
  l325:;	  yypos= yypos325; yythunkpos= yythunkpos325;
  }  yyDo(yy_4_Stmts, yybegin, yyend);
  }
  l310:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Stmts", yybuf+yypos));  yyDo(yyPop, 2, 0);
  return 1;
  l309:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Stmts", yybuf+yypos));
  return 0;
}
YY_RULE(int) yy_Root()
{  int yypos0= yypos, yythunkpos0= yythunkpos;  yyDo(yyPush, 1, 0);
  yyprintf((stderr, "%s\n", "Root"));  if (!yy_Stmts()) goto l326;  yyDo(yySet, -1, 0);  if (!yy_EOF()) goto l326;  yyDo(yy_1_Root, yybegin, yyend);
  yyprintf((stderr, "  ok   %s @ %s\n", "Root", yybuf+yypos));  yyDo(yyPop, 1, 0);
  return 1;
  l326:;	  yypos= yypos0; yythunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Root", yybuf+yypos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)();

YY_PARSE(int) YYPARSEFROM(yyrule yystart)
{
  int yyok;
  if (!yybuflen)
    {
      yybuflen= 1024;
      yybuf= (char*)YYMALLOC(yybuflen);
      yytextlen= 1024;
      yytext= (char*)YYMALLOC(yytextlen);
      yythunkslen= 32;
      yythunks= (yythunk*)YYMALLOC(sizeof(yythunk) * yythunkslen);
      yyvalslen= 32;
      yyvals= (YYSTYPE*)YYMALLOC(sizeof(YYSTYPE) * yyvalslen);
      yybegin= yyend= yypos= yylimit= yythunkpos= 0;
    }
  yybegin= yyend= yypos;
  yythunkpos= 0;
  yyval= yyvals;
  yyok= yystart();
  if (yyok) yyDone();
  yyCommit();
  return yyok;
  (void)yyrefill;
  (void)yymatchDot;
  (void)yymatchChar;
  (void)yymatchString;
  (void)yymatchClass;
  (void)yyDo;
  (void)yyText;
  (void)yyDone;
  (void)yyCommit;
  (void)yyAccept;
  (void)yyPush;
  (void)yyPop;
  (void)yySet;
  (void)yytextmax;
}

YY_PARSE(int) YYPARSE(void)
{
  return YYPARSEFROM(yy_Root);
}

#endif


/* Raise a syntax error. */
OBJ yyerror() {
  VM = yyvm;
  OBJ msg = tr_sprintf(vm, "SyntaxError in %s at line %d", TR_STR_PTR(compiler->filename), compiler->line);
  /* Stupid ugly code, just to build a string... I suck... */
  if (yytext[0]) TrString_push(vm, msg, tr_sprintf(vm, " near token '%s'", yytext));
  if (yypos < yylimit) {
    yybuf[yylimit]= '\0';
    TrString_push(vm, msg, tr_sprintf(vm, " before text \""));
    while (yypos < yylimit) {
      if ('\n' == yybuf[yypos] || '\r' == yybuf[yypos]) break;
      char c[2] = { yybuf[yypos++], '\0' };
      TrString_push(vm, msg, tr_sprintf(vm, c));
    }
    TrString_push(vm, msg, tr_sprintf(vm, "\""));
  }
  /* TODO msg should not be a String object */
  tr_raise(SyntaxError, TR_STR_PTR(msg));
  return 0;
}

/* Compiles code to a TrBlock.
   Returns NULL on error, error is stored in TR_EXCEPTION. */
TrBlock *TrBlock_compile(VM, char *code, char *fn, size_t lineno) {
  assert(!compiler && "parser not reentrant");
  charbuf = code;
  compiler = TrCompiler_new(vm, fn);
  compiler->line += lineno;
  compiler->filename = TrString_new2(vm, fn);
  TrBlock *b = NULL;

  if (!yyparse()) {
    yyerror();
    goto error;
  }

  TrCompiler_compile(compiler);
  b = compiler->block;
error:
  charbuf = 0;
  compiler = 0;
  return b;
}

